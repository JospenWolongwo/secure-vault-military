// set-env.js
const fs = require('fs');
const dotenv = require('dotenv');

// Load environment variables from .env file
const environment = process.env.NODE_ENV || 'development';
const envFile = environment === 'production' ? '.env.production' : '.env';

console.log(`Loading environment variables from ${envFile}`);
const envConfig = dotenv.config({ path: envFile }).parsed || {};

// Merge with process.env
const envVars = { ...process.env, ...envConfig };

// Create environment.ts and environment.prod.ts content
const generateEnvFile = (isProd = false) => {
  const apiUrl = isProd ? envVars.API_URL_PROD || 'https://api.securevault-military.cm/api' : envVars.API_URL_DEV || 'http://localhost:3000/api';
  const supabaseUrl = envVars.SUPABASE_URL || 'https://your-supabase-url.supabase.co';
  const supabaseKey = envVars.SUPABASE_ANON_KEY || 'your-anon-key-placeholder';
  const encryptionKey = isProd ? envVars.PROD_ENCRYPTION_KEY || 'prod-encryption-key-placeholder' : envVars.DEV_ENCRYPTION_KEY || 'dev-encryption-key-placeholder';
  
  // Feature flags
  const featureRegistration = (envVars.FEATURE_REGISTRATION || 'true') === 'true';
  const featureTwoFactorAuth = (envVars.FEATURE_TWO_FACTOR_AUTH || 'true') === 'true';
  const featureDocumentUpload = (envVars.FEATURE_DOCUMENT_UPLOAD || 'true') === 'true';
  const featureAnnouncements = (envVars.FEATURE_ANNOUNCEMENTS || 'true') === 'true';
  const featureAuditLog = (envVars.FEATURE_AUDIT_LOG || 'true') === 'true';
  const featureUserManagement = (envVars.FEATURE_USER_MANAGEMENT || 'true') === 'true';
  const featureRoleBasedAccess = (envVars.FEATURE_ROLE_BASED_ACCESS || 'true') === 'true';

  return `// This file was generated by set-env.js script
// ${isProd ? 'PRODUCTION' : 'DEVELOPMENT'} ENVIRONMENT

// API Configuration
export const API_CONFIG = {
  baseUrl: "${apiUrl}",
  auth: {
    login: "/auth/login",
    register: "/auth/register",
    refreshToken: "/auth/refresh-token",
    forgotPassword: "/auth/forgot-password",
    resetPassword: "/auth/reset-password",
    verifyEmail: "/auth/verify-email",
    me: "/auth/me",
  },
  users: {
    base: "/users",
    profile: "/users/profile",
    changePassword: "/users/change-password",
  },
  documents: {
    base: "/documents",
    upload: "/documents/upload",
    download: (id: string) => \`/documents/\${id}/download\`,
    share: (id: string) => \`/documents/\${id}/share\`,
  },
};

// Supabase Configuration
export const SUPABASE_CONFIG = {
  url: "${supabaseUrl}",
  anonKey: "${supabaseKey}",
  storageBucket: "documents",
  storageUrl: "${supabaseUrl}/storage/v1/s3",
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
  },
};

export const environment = {
  production: ${isProd},
  apiUrl: "${apiUrl}",
  appName: "${envVars.APP_NAME || 'SecureVault Military'}",
  appVersion: "${envVars.APP_VERSION || '1.0.0'}",
  enableDebug: ${!isProd},

  // Authentication
  auth: {
    tokenKey: "auth_token",
    refreshTokenKey: "refresh_token",
    userKey: "current_user",
    tokenExpiration: 3600, // 1 hour in seconds
    refreshTokenExpiration: 2592000, // 30 days in seconds
  },

  // Features
  features: {
    registration: ${featureRegistration},
    twoFactorAuth: ${featureTwoFactorAuth},
    documentUpload: ${featureDocumentUpload},
    announcements: ${featureAnnouncements},
    auditLog: ${featureAuditLog},
    userManagement: ${featureUserManagement},
    roleBasedAccess: ${featureRoleBasedAccess},
  },

  // UI Settings
  ui: {
    defaultLanguage: "en",
    supportedLanguages: ["en", "fr"],
    theme: "light",
    enableDarkMode: true,
    enableNotifications: true,
    enableAnalytics: ${isProd},
  },

  // External Services
  services: {
    supabase: {
      url: "${supabaseUrl}",
      key: "${supabaseKey}",
    },
    sentry: {
      dsn: "${envVars.SENTRY_DSN || ''}",
    },
  },

  // Security
  security: {
    encryptionKey: "${encryptionKey}",
    password: {
      minLength: 12,
      requireUppercase: true,
      requireLowercase: true,
      requireNumbers: true,
      requireSpecialChars: true,
    },
    session: {
      idleTimeout: 1800, // 30 minutes in seconds
      warningBeforeTimeout: 300, // 5 minutes in seconds
    },
  },
};
${isProd ? '' : `
/*
 * For easier debugging in development mode, you can import the following file
 * to ignore zone related error stack frames such as \`zone.run\`, \`zoneDelegate.invokeTask\`.
 *
 * This import should be commented out in production mode because it will have a negative impact
 * on performance if an error is thrown.
 */
// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.
`}`;
};

// Create environment.ts
const devEnvironment = generateEnvFile(false);
fs.writeFileSync('./src/environments/environment.ts', devEnvironment);
console.log('Environment.ts file generated.');

// Create environment.prod.ts
const prodEnvironment = generateEnvFile(true);
fs.writeFileSync('./src/environments/environment.prod.ts', prodEnvironment);
console.log('Environment.prod.ts file generated.');
